### hello ###

{#code]hello[#dyn]
[#R<]# R code without output since R<
who <- "MisteR"
[#rb<]# ruby code without output since rb<
who = "Miss Ruby"
[#<] No output since <.
Next, definition of function hello 

{#def]hello[#,]name[Miss][#>]
  [from Dyn, \textbf{Hello #{name}}]
[#}

[#>]

  [{#hello#}
  |{#hello]Mister[#}
  |from ruby, Hello \textit{:{who}} 
  |from R, Hello \underline{:r{who}}]

[#code}

{#code]helloLib[#dyn]
{#def]hello[#,]name[Miss][#>]
  [from Dyn, Hello #{name}]
[#}
[#code}

{#code]helloBis[#dyn]
[#require]helloLib
[#main][#r<]who <- "MisteR"[#rb<] who = "Miss Ruby"
[#>]

  [{#hello#}
  |{#hello]Mister[#}
  |from ruby, Hello :{who}
  |from R, Hello :r{who}]

[#code}

### tags ###

{#code]tags[#dyn]{#...] ... [#...] ... [#...] ... [#...} [#code}  

{#code]tags2[#dyn]{#...] ... 
[#...] ...
[#...] ... 
[#...} [#code} 

{#code]tags3[#dyn]{#...] ... 
[#...] ... [#...] ... [#...] ...
[#...] ... [#...} [#code} 

{#code]tags4[#dyn]{#cmd1]contenu associé la la balise ouverte de la commande de bloc cmd1 
[#cmd1Seq1]début du contenu de la balise cmd1Seq1{#cmd2] ... [#cmd2}
suite du contenu de la balise cmd1Seq1
[#cmd1Seq2]contenu de la balise cmd1Seq2[#cmd1} 
[#code}

## 

{#code]varsDyndoc[#dyn]
[#>]toto[TOTO]        [#=]titi[TITI]
[#>]First step: (#{toto}) AND (#{titi})
[#>]toto+[ and TOTO2] [#+]titi[ and TITI2]
[#>]Second step: (#{toto}) AND (#{titi})
[#>]toto[NewTOTO]     [#=]titi[NewTITI]
[#>]Third step: (#{toto}) AND (#{titi})
[#code}


{#code]varsR[#dyn]
[#=]toto[TOTO]
[#%]Ruby variables from Dyndoc environment
[#=]toto@[[1,3,2]]
[#>] [Content of toto@: #{toto@}<\n>]
[#%]R variables from Dyndoc environment
[#=]toto$[c(1,3,2)]
[#>] [Content of toto$: #{toto$}<\n>]
[#code}

{#code]inRCode[#dyn]
[#R<] 
<toto@>[1]= sum(<toto@>)
<toto:> = tolower(<toto:>)
<toto$>[1] = diff(<toto$>[1:2])
[#>]After R, 
toto=#{toto}
toto@=#{toto@}
toto$=#{toto$}
[#code}

{#code]inRbCode[#dyn]
[#rb<]  
<toto@>[0]= 1
<toto:> = <toto:>.upcase
<toto[1]$> -= 1
[#>]After ruby, 
toto=#{toto}
toto@=#{toto@}
toto$=#{toto$}
[#code}

{#code]ifTag[#dyn]
[#rb<]n=11
[#>]:{n} is {#if]n%2==1[#>]odd[#else]even[#if} and |
[#R<]n <- 28
[#>]:r{n} is {#if]:r{n%%2==1}[#>]odd[#else]even[#if}
[#code}

{#code]ifRCode[#dyn]
[#R>]n=31
    if(n%%2==1) {#>]:r{n} is odd[#>}
    else {#>]:r{n} is even[#>}
[#code}

{#code]ifRbCode[#dyn]
[#rb>]n=33
    if n%2==1 
        {#>]:{n} is odd[#>}
    else 
        {#>]:{n} is even[#>}
    end
[#code}

{#code]ifSeqTag[#dyn]
[#rb<]n=14[#R<]n <- 25
[#>]:{n} is [#?]n%2==1[#>]odd[#?]else[#>]even[#?]end
[#>] and :r{n} is |
[#?]:r{n%%2==1}[#>]odd[#?]else[#>]even
[#code}

{#code]caseTag[#dyn]
[#=]todo[first,third,second,first]
[#>]List of the translated words in French:
{#case]#{todo}
[#when]first[#>][premier ]
[#when]second[#>][deuxième ]
[#when]third[#>][troisième ]
[#case}
[#code}

{#code]caseRCode[#dyn]
[#=]todo[first,third,second,first]
[#>]List of the translated words in French:
[#R>] 
	for(todo in strsplit(#{=todo},",")[[1]]) {
		switch(todo,
		first={#>]premier [#>},
		second={#>]deuxième [#>},
		third={#>]troisième [#>})
	}
[#code}

{#code]caseRbCode[#dyn]
[#=]todo[first,third,second,first]
[#>]List of the translated words in French:
[#rb>]#{=todo}.split(",").each do |todo| 
	case todo.to_sym
	when :first then {#>]premier [#>}
	when :second then {#>]deuxième [#>}
	when :third then {#>]troisième [#>}
	end
end
[#code}

{#code]loopRCode[#dyn]
[#>]Dyndoc inside R block!
[#R>] for(cpt in 1:4) { {#>]item:r{cpt} [#>} }
[#>]<\n>but also, 
[#R>] sapply(5:8,function(cpt) {#>]item:r{cpt} [#>})
[#code}

{#code]loopRbCode[#dyn]
[#>]Dyndoc inside ruby block!
[#rb>] for cpt in 1..4 do {#>]item:{cpt} [#>}; end
[#>]<\n>but also,
[#rb>] (5..8).each do |cpt| {#>]item:{cpt} [#>}; end
[#code}


## R code

{#code]RInCode[#dyn]
[#R<]# No output even for the following "cat(...)"
a <- c("toto","titi")
cat(a,'\n')
a2 <- paste(a,1:2,sep="")
cat(a2,'\n')
a3 <- paste(a2,collapse=" & ")
cat(a3)
[#>]Extracting the R results inside dyndoc:
a is :r{a}
a2 is #r{a2}
a3 is :r{a3}
[#code}

{#code]rverbCode[#dyn]
[#>]\textit{Mode séquentiel}~:
[#R>>]x <- rnorm(3)
x
[#>]
\textit{Mode imbriqué}~:
{#rverb]
c(mean(x),sd(x))
[#}
[#code}

{#code]rverb2Code[#dyn]
[#<] {#r]a<-rnorm(5) [#in]exo[#}
{#def]test[#,]opt[m][#,]l[5]
[#<]{#opt]#{opt}[#}[#>]
{#rverb][#??]m[#>]mean(a)
[#??]s[#>]sd(a)[#in]exo[#rverb}
#r{exo:a[1:#{l}]}[#def}
[#>]{#test]m[#} {#test]s[#l]3[#}
[#code}

{#code]ROutCode[#dyn]
[#R>]# Each output goes to the document
a <- c("toto","titi")
cat(a,'\n')
a2 <- paste(a,1:2,sep="")
cat(a2,'\n')
a3 <- paste(a2,collapse=" & ")
cat(a3)
[#code}


## Ruby code

{#code]RbInCode[#dyn]
[#rb<]# No output even for the following "puts"
a=["toto","titi"]
p a
a2=a.each.with_index.map{|e,i| e+(i+1).to_s}
puts a2
a3=a2.join(" & ")
puts a3
[#>]Extracting the ruby results inside dyndoc:
a is :{a}
a2 is #rb{a2}
a3 is :rb{a3}
[#code}

{#code]RbOutCode[#dyn]
[#rb>]# Each output goes to the document
a=["toto","titi"]
p a
a2=a.each_with_index.map{|e,i| e+(i+1).to_s}
puts a2
a3=a2.join(" & ")
puts a3
[#code}


## General

{#code]blck_tags[#dyn]
[#>] 

    [This is two |
	|lines put in three
	|lines of code]

[#code}

C'est l'original ici uniquement pour sauvergarde!!!
{#code]varsAll[#dyn]
[#>]Text variables from Dyndoc environment: declaration and use
[#=]toto[TOTO]
[#>] [#{toto}|]
[#>]toto+[ and TITI]
[#>] [#{toto}|]
[#=]toto[TOTO2]
[#>] [#{toto}<\n>]
[#>]Ruby variables from Dyndoc environment: declaration and use
[#=]toto@[[1,3,2]]
[#>] [#{toto@}<\n>]
[#>]R variables from Dyndoc environment: declaration and use
[#=]toto$[c(1,3,2)]
[#>]#{toto$}
[#rb<]	<toto@>[0]= <toto@>.inject(0) { |s,v| s += v }
 		<toto:> = <toto:>.downcase
 		<toto[1]$> = <toto$>.inject(0) { |s,v| s += v }
[#>]After ruby: toto (resp. toto@ and toto$) 
contains #{toto} (resp. #{toto@} and #{toto$})
[#R<]	<toto@>[1]= 1L
 		<toto:> = toupper(<toto:>)
 		<toto$>[1] = 1
[#>]After R: toto (resp. toto@ and toto$) 
contains #{toto} (resp. #{toto@} and #{toto$})
[#code}

{#code]def[#dyn]
[#<] 
	{#def]toto[#,]par1[value1][#,]par2@[[:value2,"value2bis"]]
	[#,]ary[<<comp1[valcomp1]<<comp2[valcomp2]] 
	[#>] 
		[This is a Dyndoc function
		|with argument called
		|with Dyndoc arg1: #{par1} and arg2: #{par2@}
		|and ary.comp1: #{ary.comp1} and ary.comp2:  #{ary.comp2}] 
	[#def}
[#>] 
	[Call with default parameters:
	|{#toto#}
	|Call with updated first parameter:
	|{#toto]value1bis[#}
	|Call with updated second and third parameter:
	|{#toto][#par2@]"value2alt".upcase[#ary.comp2]val2xomp2[#}]
[#code}

{#code]array_list[#dyn]
[#=]list[<<a[listAContent]<<b[listBContent]]
[#=]array[<<[ary1Content]<<[ary2Content]]
[#>]list content: a=#{list.a}, b=#{list.b}
array content: #{array.0}, #{array.1}
[#code}